#!/usr/bin/env node

'use strict';

const fs = require('fs-extra');
const path = require('path');
const { buildTree, createNode, getNodesById } = require('..');

function timeInMs([seconds, ns]) {
  return Math.round(seconds * 1e3 + ns / 1e6);
}

if (process.argv.length < 3) {
  process.stderr.write(`Usage: ${path.basename(process.argv[1])} <FILES>\n\nFILES - One or more files to visualize.\n`);

  process.exitCode = 1;
} else {
  const instrumentationFiles = process.argv.slice(2);
  const trees = {};

  for (const instrumentationFile of instrumentationFiles) {
    try {
      const startTime = process.hrtime();

      process.stdout.write(`Processing '${instrumentationFile}'… `, 'utf8');

      const instrumentation = JSON.parse(fs.readFileSync(instrumentationFile, 'utf8'));
      const nodes = instrumentation.nodes;

      process.stdout.write(`found ${nodes.length} nodes… `, 'utf8');

      const rootId = typeof nodes[0]._id !== 'undefined' ? nodes[0]._id : nodes[0].id;
      const nodesById = getNodesById(nodes);

      trees[instrumentationFile] = buildTree(nodesById, rootId, createNode);

      process.stdout.write(`finished in ${timeInMs(process.hrtime(startTime))}ms.\n`);
    } catch (ex) {
      process.stdout.write('\n\n');

      throw ex;
    }
  }

  fs.copySync(path.join(__dirname, '..', 'src'), 'dist');
  fs.writeFileSync(path.join('dist', 'broccoli-viz-sunburst.jsonp'), `loadData(${JSON.stringify(trees)});`, 'utf8');
}
